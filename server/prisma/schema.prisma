generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  firstName     String?    
  lastName      String?    
  email         String?    @unique
  password      String?    
  phoneNumber   String?    
  image         String?    
  bio           String?    
  type          UserType?  
  address       String?    
  posts         Post[]     
  cart          Cart?      
  favourites    Favourite[] 
  history       History[]  
  notifications Notification[]
  chatsInitiated Chat[]     @relation("UserChats")       
  chatsReceived  Chat[]     @relation("ReceiverChats")   

  messages       Message[]
  Booking        Booking[]
  expoPushToken String?
 
  comments       Comment[]
  reports        Report[]

}

model Post {
  id                 Int           @id @default(autoincrement())
  title              String?
  images             Image[]
  description        String?
  location           String?
  price              Decimal?
  category           PostCategory?
  rating             Int?
  userId             Int
  user               User          @relation(fields: [userId], references: [id])
  cancellationPolicy String?
  roomConfiguration  String?
  houseRules         String?
  safetyProperty     String?
  bookings           Booking[] // New relation to Booking model
  calendar           Calendar[]
  favourites         Favourite[]
  history            History[]
  cartPosts          CartPost[]
  map                Map?
  comments           Comment[]
  reports        Report[]

}

model Booking {
  id              Int      @id @default(autoincrement())
  userId          Int
  postId          Int
  startDate       DateTime
  endDate         DateTime
  guestName       String?
  guestCountry    String?
  propertyDetails String?  // JSON string
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  totalPrice     Float
  numberOfGuests Int
  status         String     @default("PENDING") // "PENDING", "CONFIRMED", "REJECTED"
  notifications Notification[]
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Image {
  id     Int    @id @default(autoincrement())
  url    String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])

  @@unique([id])
}

model Calendar {
  id       Int       @id @default(autoincrement())
  date     DateTime?
  isBooked Boolean
  postId   Int
  post     Post      @relation(fields: [postId], references: [id])
}

model Favourite {
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model Cart {
  id         Int        @id @default(autoincrement())
  totalPrice Decimal?
  status     String?
  userId     Int        @unique
  user       User       @relation(fields: [userId], references: [id])
  cartPosts  CartPost[]
}

model CartPost {
  id     Int  @id @default(autoincrement())
  postId Int  @unique
  post   Post @relation(fields: [postId], references: [id])
  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])
}

model History {
  id           Int       @id @default(autoincrement())
  bookingDate  DateTime?
  checkInDate  DateTime?
  checkOutDate DateTime?
  status       String?
  totalPrice   Decimal?
  userId       Int
  postId       Int
  numberOfGuests Int?
  user         User      @relation(fields: [userId], references: [id])
  post         Post      @relation(fields: [postId], references: [id])

  @@unique([id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String   // "BOOKING_REQUEST", "BOOKING_ACCEPTED", "BOOKING_REJECTED"
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  bookingId Int?
  user      User     @relation(fields: [userId], references: [id])
  booking   Booking? @relation(fields: [bookingId], references: [id])
}

model Chat {
  id         Int       @id @default(autoincrement())
  userId     Int
  receiverId Int
  user       User      @relation("UserChats", fields: [userId], references: [id])
  receiver   User      @relation("ReceiverChats", fields: [receiverId], references: [id])
  messages   Message[]
  createdAt  DateTime  @default(now())
    unreadCount Int @default(0)

}

model Message {
  id               Int          @id @default(autoincrement())
  content          String?
  sentAt           DateTime     @default(now())
  isRead           Boolean      @default(false)
  userId           Int
  chatId           Int
  callStatus       String?
  duration         Int?
  type             MessageType? @default(TEXT)
  voiceMessagePath String?
  
  user     User     @relation(fields: [userId], references: [id])
  chat     Chat     @relation(fields: [chatId], references: [id])
  translations MessageTranslation[] // Add this line
    read Boolean @default(false)

}

model MessageTranslation {
  id          Int      @id @default(autoincrement())
  messageId   Int
  language    String
  translation String
  message     Message  @relation(fields: [messageId], references: [id])
  @@unique([messageId, language])
}
model Map {
  id        Int      @id @default(autoincrement())
  latitude  Decimal?
  longitude Decimal?
  postId    Int      @unique
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int?     // Optional rating score (e.g., 1-5 stars)
  createdAt DateTime @default(now())
  
  // Foreign keys and relations
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Report {
  id        Int      @id @default(autoincrement())
  reasons   String   // Will store JSON string of selected reasons
  details   String?  // Additional details text
  status    ReportStatus @default(PENDING)
  createdAt DateTime @default(now())
  
  // Foreign keys and relations
  userId    Int      // User who reported
  postId    Int      // Post being reported
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

enum UserType {
  host
  guest
}

enum PostCategory {
  house
  apartment
  villa
  hotel
  historical
  lake
  beachfront
  countryside
  castles
  experiences
  camping
  desert
  luxe
  islands
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
  NOTIFICATION
  VOICE
  VIDEO_CALL
  AUDIO
}

enum CallStatus {
  MISSED
  REJECTED
  FAILED
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

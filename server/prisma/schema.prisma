generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  firstName     String?    
  lastName      String?    
  email         String?    @unique
  password      String?    
  phoneNumber   Int?       
  image         String?    
  bio           String?    
  type          UserType?  
  address       String?    
  posts         Post[]     
  cart          Cart?      
  favourites    Favourite[] 
  history       History[]  
  notifications Notification[]
  chat          Chat[]     
  messages      Message[]  
    bookings      Booking[]  // New relation to Booking model


  @@unique([id])
}

model Post {
  id                Int       @id @default(autoincrement())
  title             String?
  images            Image[]
  description       String?
  location          String?
  price             Decimal?
  category          PostCategory?
  rating            Int?
  userId            Int
  user              User      @relation(fields: [userId], references: [id])
  calendar          Calendar[]
  favourites        Favourite[]
  history           History[]
  cartPosts         CartPost[]
  map               Map?
  cancellationPolicy String?
  roomConfiguration  String?
  houseRules         String?
  safetyProperty     String?
    bookings          Booking[]  // New relation to Booking model


  @@unique([id])
}
model Booking {
  id            Int       @id @default(autoincrement())
  userId        Int
  postId        Int
  startDate     DateTime
  endDate       DateTime
  totalPrice    Float
  numberOfGuests Int
  status        BookingStatus

  user          User     @relation(fields: [userId], references: [id])
  post          Post     @relation(fields: [postId], references: [id])
}
model Calendar {
  id      Int       @id @default(autoincrement())
  date    DateTime? 
  isBooked Boolean  
  postId  Int       
  post    Post      @relation(fields: [postId], references: [id])

  @@unique([id])
}

model Favourite {
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model Cart {
  id        Int       @id @default(autoincrement())
  totalPrice Decimal?
  status    String?
  userId    Int       @unique  // Ensuring the userId is unique for one-to-one relation
  user      User      @relation(fields: [userId], references: [id])
  cartPosts CartPost[]
}

model CartPost {
  id       Int     @id @default(autoincrement())
  postId   Int     @unique  
  post     Post    @relation(fields: [postId], references: [id])
  cartId   Int
  cart     Cart    @relation(fields: [cartId], references: [id])
}



model History {
  id          Int       @id @default(autoincrement())
  bookingDate DateTime? 
  checkInDate DateTime? 
  checkOutDate DateTime? 
  status      String?   
  totalPrice  Decimal?  
  userId      Int       
  postId      Int       
  user        User      @relation(fields: [userId], references: [id])
  post        Post      @relation(fields: [postId], references: [id])

  @@unique([id])
}

model Notification {
  id        Int       @id @default(autoincrement())
  message   String?   
  status    String?   
  createdAt DateTime? 
  userId    Int       
  user      User      @relation(fields: [userId], references: [id])

  @@unique([id])
}

model Chat {
  id     Int       @id @default(autoincrement())
  userId Int       
  user   User      @relation(fields: [userId], references: [id])
  messages Message[]

  @@unique([id])
}

model Message {
  id       Int       @id @default(autoincrement())
  content  String?   
  sentAt   DateTime? 
  isRead   Boolean   
  userId   Int       
  chatId   Int       
  user     User      @relation(fields: [userId], references: [id])
  chat     Chat      @relation(fields: [chatId], references: [id])

  @@unique([id])
}

model Map {
  id         Int       @id @default(autoincrement())
  latitude   Decimal?  
  longitude  Decimal?  
  postId     Int       @unique  // Add @unique attribute here
  post       Post      @relation(fields: [postId], references: [id])

  @@unique([id])
}

model Image {
  id     Int    @id @default(autoincrement())
  url    String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])

  @@unique([id])
}

enum UserType {
  host
  guest
}

enum PostCategory {
  house
  apartment
  villa
  hotel
  historical
  lake
  beachfront
  countryside
  castles
  experiences
  camping
  desert
  luxe
  islands
}
enum BookingStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}
